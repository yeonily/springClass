#server port
server.port=9000

#oracle
#spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
#spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE
spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver
spring.datasource.url=jdbc:p6spy:oracle:thin:@localhost:1521:XE
spring.datasource.username=hr
spring.datasource.password=hr

#JPA dialect
#JPA는 특정 DBMS에 종속되어 있지 않기 때문에, 원하는 dialect로 설정하면 자동으로 번역해준다.
spring.jpa.database-platform=org.hibernate.dialect.OracleDialect

#JPA ddl-auto
#ddl 쓸 때 옵션
#create: 있는 테이블 다 드랍하고 create, 데이터 다 날아감// 테이블 삭제(DROP) 후 생성(CREATE)
#spring.jpa.hibernate.ddl-auto=create
#create-drop: 있는 테이블 드랍하고 다시 만들고 다시 다 날림// 테이블 삭제(DROP) 후 생성(CREATE) 후 SqlSession 종료 시 삭제(DROP)
#spring.jpa.hibernate.ddl-auto=create-drop
#update: 기존에 만들어놓거 컬럼하나 추가 되는 거// Entity 클래스와 DB 스키마 구조를 비교해서 DB쪽에 생성되지 않은 테이블, 컬럼 추가(삭제는 안 됨)
spring.jpa.hibernate.ddl-auto=update
#validate: 자바쪽에서 만들어논 테이블 검증, 오류가 생김, 실무에서 사용,// Entity 클래스와 DB 스키마 구조를 비교해서 같은지만 확인(다르면 예외 발생)
#spring.jpa.hibernate.ddl-auto=validate

#JPA format
spring.jpa.properties.hibernate.format_sql=true

#log
spring.output.ansi.enabled=always
#logging.level.org.hibernate.SQL=debug